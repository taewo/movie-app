{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","movieImg","react_default","a","createElement","src","alt","className","MovieGenre","_ref3","genre","Movie","_ref","movieTitle","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","id","title_english","medium_cover_image","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","data","json","catch","err","error","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAuBA,SAASA,EAATC,GAAkC,IAAXC,EAAWD,EAAXC,SACnB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAUK,IAAI,QAAQC,UAAU,kBAGrD,SAASC,EAATC,GAA8B,IAARC,EAAQD,EAARC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAmBzBC,MA5Cf,SAAAC,GAA0D,IAAzCC,EAAyCD,EAAzCC,WAAYZ,EAA6BW,EAA7BX,SAAUa,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SAC3C,OACIb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACL,EAAD,CAAaE,SAAUA,KAE3BC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBf,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEf,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBACRQ,MCmCNI,6MA9CbC,MAAQ,KAORC,cAAgB,WAad,OAZeC,EAAKF,MAAMG,OAAOP,IAAI,SAACQ,GAEpC,OADAC,QAAQC,IAAIF,GAEVtB,EAAAC,EAAAC,cAACuB,EAAD,CACET,IAAKM,EAAMI,GACXf,WAAYW,EAAMK,cAClB5B,SAAUuB,EAAMM,mBAChBhB,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAOxBgB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAIA,EAAKD,KAAKtB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQwB,MAAMD,yFA9B5BN,KAAKX,8CAkCL,OACE7B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdmC,KAAKtB,MAAMG,OAASmB,KAAKrB,gBAAkB,kBAzChC6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.3b04a3d3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\nfunction Movie ({movieTitle, movieImg, genres, synopsis}) {\n    return (\n        <div className='Movie'>\n            <div className='Movie__Columns'>\n                <MoviePoster movieImg={movieImg} />\n            </div>\n            <div className='Movie__Columns'>\n                <h1>{movieTitle}</h1>\n                <div className='Movie__Genres'>\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <p className='Movie__Synopsis'>\n                    {synopsis}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nfunction MoviePoster ({movieImg}) {\n    return <img src={movieImg} alt=\"hello\" className='Movie__Poster' />\n}\n\nfunction MovieGenre ({genre}) {\n    return (\n        <span className='Movie__Genre'>{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    movieTitle: PropTypes.string,\n    movieImg: PropTypes.string,\n    genres: PropTypes.string,\n    synopsis: PropTypes.string,\n}\n\nMoviePoster.propTypes = {\n    movieImg: PropTypes.string\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  state = {\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return (\n        <Movie\n          key={movie.id}\n          movieTitle={movie.title_english}\n          movieImg={movie.medium_cover_image}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      )\n    })\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n    .then(data => data.json())\n    .then(json => json.data.movies)\n    .catch(err => console.error(err))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}